# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CommentaryEdge {
  node: CommentaryEntity!
}

type CommentaryEntity {
  content: String!
  createdAt: String!
  id: String!
  postId: String!
  updatedAt: String!
  user: UserEntity!
}

type CommentaryPagination {
  edges: [CommentaryEdge!]!
  pageInfo: PaginationInfo!
  totalCount: Int!
  totalPages: Int!
}

input CommentarySortInput {
  filter: String
  type: CommentarySortType!
}

"""Review sort type enum"""
enum CommentarySortType {
  CREATE_DATE_ASC
  POPULAR
}

type CompanyEntity {
  id: String!
  logoPath: String
  name: String!
  originCountry: String!
}

type LanguageEntity {
  englishName: String!
  iso639: String!
  name: String!
}

"""Like type enum"""
enum LikeType {
  COMMENTARY
  POST
  REPLY
}

type ListEntity {
  backgroundImageUrl: String
  id: String!
  isPrivate: Boolean
  name: String!
  post: PostEntity!
  postId: String!
}

type MovieCharacterEntity {
  adult: Boolean!
  castId: Int!
  character: String!
  creditId: String!
  gender: Float!
  id: Int!
  knownForDepartment: String!
  name: String!
  order: Int!
  originalName: String!
  popularity: Float!
  profilePath: String
  profilePictureUrl: String!
}

type MovieCreditsEntity {
  cast: [MovieCharacterEntity!]!
  crew: [MovieCrewMemberEntity!]!
}

type MovieCrewMemberEntity {
  adult: Boolean!
  creditId: String!
  department: String!
  gender: Float!
  id: Int!
  job: Int!
  knownForDepartment: String!
  name: String!
  originalName: String!
  popularity: Float!
  profilePath: String
  profilePictureUrl: String!
}

type MovieEntity {
  backdropUrl: String!
  genres: [MovieGenreEntity!]!
  id: Int!
  imdbId: String!
  originalLanguage: String!
  originalTitle: String!
  overview: String!
  posterUrl: String!
  productionCompanies: [CompanyEntity!]!
  releaseDate: String
  runtime: Int!
  spokenLanguages: [LanguageEntity!]!
  voteAverage: Float!
}

type MovieGenreEntity {
  id: Int!
  name: String!
}

type MovieReferenceEdge {
  node: MovieReferenceEntity!
}

type MovieReferenceEntity {
  movie: MovieEntity!
  movieId: Int!
  referenceId: String!
}

type MovieReferencePagination {
  edges: [MovieReferenceEdge!]!
  pageInfo: PaginationInfo!
  totalCount: Int!
  totalPages: Int!
}

input MovieReferenceSortInput {
  filter: String
  type: MovieReferenceSortType!
}

"""MovieReferenceSortType type enum"""
enum MovieReferenceSortType {
  DECADE
  GENRE
  RELEASE_DATE_ASC
  RELEASE_DATE_DESC
  YEAR
}

type MovieWithCredits {
  backdropUrl: String!
  credits: MovieCreditsEntity!
  genres: [MovieGenreEntity!]!
  id: Int!
  imdbId: String!
  originalLanguage: String!
  originalTitle: String!
  overview: String!
  posterUrl: String!
  productionCompanies: [CompanyEntity!]!
  releaseDate: String
  runtime: Int!
  spokenLanguages: [LanguageEntity!]!
  voteAverage: Float!
}

type Mutation {
  addMovieToList(listId: String!, movieId: Int!): MovieEntity!
  addMovieToPreMadeList(listType: PreMadeListType!, movieId: Int!): MovieEntity!
  createCommentary(content: String!, postId: String!): CommentaryEntity!
  createList(content: String, listName: String!): ListEntity!
  createReply(commentaryId: String!, content: String!): ReplyEntity!
  createReview(content: String!, movieId: Int!): ReviewEntity!
  createUser(githubId: String!): UserEntity!
  deleteCommentary(commentaryId: String!): Boolean!
  deleteList(listId: String!): Boolean!
  deleteReply(replyId: String!): Boolean!
  deleteReview(postId: String!): Boolean!
  likeOrDislike(contentId: String!, likeType: LikeType!): Boolean!
  removeMovieFromList(listId: String!, movieId: Int!): Boolean!
  removeMovieFromPreMadeList(listType: PreMadeListType!, movieId: Int!): Boolean!
  signUp(githubId: String!): Boolean!
  toggleReviewPin(postId: String!): Boolean!
}

type PaginationInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type PostEntity {
  commentaryCount: Int!
  content: String
  createdAt: String!
  id: String!
  likeCount: Int!
  updatedAt: String!
  user: UserEntity!
}

"""PreMadeList type enum"""
enum PreMadeListType {
  FAVORITE
  WATCHED
  WATCHLIST
  WATCH_LATER
}

type Query {
  commentaries(page: Int!, postId: String!, sort: CommentarySortInput): CommentaryPagination!
  list(listId: String!): ListEntity!
  listMovies(listId: String!, page: Int!, sort: MovieReferenceSortInput): MovieReferencePagination!
  movie(movieId: Int!): MovieEntity!
  movieWithCredits(movieId: Int!): MovieWithCredits!
  replies(commentaryId: String!, page: Int!, sort: ReplySortInput): ReplyPagination!
  review(postId: String!): ReviewEntity!
  reviews(page: Int! = 1, sort: ReviewSortInput, userId: String): ReviewPagination!
  streamingProviders: [StreamingProviderEntity!]!
  user(username: String!): UserEntity!
  userById(userId: String!): UserEntity!
}

type ReplyEdge {
  node: ReplyEntity!
}

type ReplyEntity {
  commentaryId: String!
  content: String!
  createdAt: String!
  id: String!
  updatedAt: String!
  user: UserEntity!
}

type ReplyPagination {
  edges: [ReplyEdge!]!
  pageInfo: PaginationInfo!
  totalCount: Int!
  totalPages: Int!
}

input ReplySortInput {
  filter: String
  type: ReplySortType!
}

"""Reply sort type enum"""
enum ReplySortType {
  CREATE_DATE_ASC
  POPULAR
}

type ReviewEdge {
  node: ReviewEntity!
}

type ReviewEntity {
  id: ID!
  isPinned: Boolean!
  movie: MovieEntity!
  post: PostEntity!
}

type ReviewPagination {
  edges: [ReviewEdge!]!
  pageInfo: PaginationInfo!
  totalCount: Int!
  totalPages: Int!
}

input ReviewSortInput {
  filter: String
  type: CommentarySortType!
}

type StreamingProviderEntity {
  displayPriority: Int!
  id: Int!
  logoPath: String!
  name: String!
}

type UserEntity {
  biography: String
  createdAt: String!
  id: String!
  profilePictureUrl: String
  realName: String
  updatedAt: String!
  username: String!
}